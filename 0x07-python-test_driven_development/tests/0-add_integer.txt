===========================
How to Utilize 0-add_integer.py
===========================

This module presents an integer addition function named ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` calculates and returns the addition of its two arguments. When dealing with numbers, the result is identical to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

The function also accommodates floating-point values.

::

    >>> add_integer(2.0, 3.0)
    5

Note that floating-point numbers are converted to integers before the addition operation takes place.

::

    >>> add_integer(2.9, 0.2)
    2

::

    >>> add_integer(-2.9, -0.2)
    -2

Combining floating-point and non-floating point values is supported.

::

    >>> add_integer(2.3, -3)
    -1

The second argument is optional; by default, it is set to 98.

::

    >>> add_integer(2)
    100

Non-Numeric Inputs
===========

``add_integer()`` requires both arguments to be either integers or floats. If either argument is neither an integer nor a float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only displayed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will raise an error if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Similarly, an error occurs when NaN (Not a Number) values are provided.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
